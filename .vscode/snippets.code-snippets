{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Import Lodash": {
		"prefix": "_",
		"body": [
			"import _ from \"lodash\";"
		],
	},
	"React Component": {
		"prefix": "tsxcmp",
		"body": [
			"import * as React from \"react\";",
			"",
			"export interface $1Props {",
			"",
			"}",
			"",
			"export class $1 extends React.Component<$1Props> {",
			"    public render() {",
			"        const { } = this.props;",
			"",
			"        return (",
			"            <div></div>",
			"        );",
			"    }",
			"}",
			""
		],
		"description": "Empty React Component"
	},
	"React Container": {
		"prefix": "tsxctr",
		"body": [
			"import { connect, MapDispatchToProps, MapStateToProps } from \"react-redux\";",
			"import { $1, $1Props } from \"../components/$1\"",
			"",
			"type SProps = Pick<$1Props, \"$2\">;",
			"type DProps = Pick<$1Props, \"$3\">;",
			"",
			"const mapStateToProps: MapStateToProps<SProps, {}, AppState> = (state) => ({",
			"$4",
			"});",
			"",
			"const mapDispatchToProps: MapDispatchToProps<DProps, {}> = (dispatch) => ({",
			"$5",
			"});",
			"",
			"export const $1Container = connect(mapStateToProps, mapDispatchToProps)($1);",
			"",
		],
		"description": "Empty React Container"
	},
	"API Endpoint Test Case": {
		"prefix": "eptest",
		"body": [
			"it(\"$1\", async function () {",
			"    const req: $1Request = {",
			"",
			"    };",
			"    const res = await routes.$1(req);",
			"    expect(res).to.not.be.null()",
			"});",
		]
	},
	"Middleware On-Handler": {
		"prefix": "mwon",
		"body": [
			".on($1, (action, next, dispatch) => {",
			"    $2",
			"})",
		]
	},
}